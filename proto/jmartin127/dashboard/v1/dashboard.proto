syntax = "proto3";

package jmartin127.dashboard.v1;

option go_package = "github.com/jmartin127/dashboard/proto/gen/go/jmartin127/dashboard/v1";

import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "jmartin127/traffic/v1/traffic.proto";
import "jmartin127/weather/v1/weather.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Dashboard Service";
		version: "1.0";
		contact: {
			name: "Jeff Martin";
			url: "https://github.com/jmartin127/dashboard";
			email: "noreply@gmail.com";
		};
	};
};

service Dashboard {
  rpc GetDashboard (GetDashboardRequest) returns (GetDashboardReply) {
    option (google.api.http) = {
      get: "/dashboard"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "Retrieve a full dashboard of information";
			description: "Use this endpoint to retrieve the full dashboard of traffic and weather information. Both the origin and destination are required. The destination is used when retrieving the weather.";
		};
  }
}

message GetDashboardRequest {
  string originAddress = 1 [(validate.rules).string.min_len = 1];     
  string destinationAddress = 2 [(validate.rules).string.min_len = 1];
}

message GetDashboardReply {
  jmartin127.traffic.v1.GetTravelTimeReply traffic = 1;
  jmartin127.weather.v1.GetCurrentWeatherReply weather = 2;
}
