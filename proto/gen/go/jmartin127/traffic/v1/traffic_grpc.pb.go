// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrafficClient is the client API for Traffic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrafficClient interface {
	GetTravelTime(ctx context.Context, in *GetTravelTimeRequest, opts ...grpc.CallOption) (*GetTravelTimeReply, error)
}

type trafficClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficClient(cc grpc.ClientConnInterface) TrafficClient {
	return &trafficClient{cc}
}

func (c *trafficClient) GetTravelTime(ctx context.Context, in *GetTravelTimeRequest, opts ...grpc.CallOption) (*GetTravelTimeReply, error) {
	out := new(GetTravelTimeReply)
	err := c.cc.Invoke(ctx, "/jmartin127.traffic.v1.Traffic/GetTravelTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrafficServer is the server API for Traffic service.
// All implementations must embed UnimplementedTrafficServer
// for forward compatibility
type TrafficServer interface {
	GetTravelTime(context.Context, *GetTravelTimeRequest) (*GetTravelTimeReply, error)
	mustEmbedUnimplementedTrafficServer()
}

// UnimplementedTrafficServer must be embedded to have forward compatible implementations.
type UnimplementedTrafficServer struct {
}

func (UnimplementedTrafficServer) GetTravelTime(context.Context, *GetTravelTimeRequest) (*GetTravelTimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTravelTime not implemented")
}
func (UnimplementedTrafficServer) mustEmbedUnimplementedTrafficServer() {}

// UnsafeTrafficServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrafficServer will
// result in compilation errors.
type UnsafeTrafficServer interface {
	mustEmbedUnimplementedTrafficServer()
}

func RegisterTrafficServer(s grpc.ServiceRegistrar, srv TrafficServer) {
	s.RegisterService(&Traffic_ServiceDesc, srv)
}

func _Traffic_GetTravelTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTravelTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServer).GetTravelTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jmartin127.traffic.v1.Traffic/GetTravelTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServer).GetTravelTime(ctx, req.(*GetTravelTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Traffic_ServiceDesc is the grpc.ServiceDesc for Traffic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Traffic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jmartin127.traffic.v1.Traffic",
	HandlerType: (*TrafficServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTravelTime",
			Handler:    _Traffic_GetTravelTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jmartin127/traffic/v1/traffic.proto",
}
